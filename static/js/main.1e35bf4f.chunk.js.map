{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","index.js","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","colr","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","src","coronaImage","alt","image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1e35bf4f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid, StylesProvider } from '@material-ui/core';\nimport styles from './Cards.module.css';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n    if(!confirmed) {\n        return 'Loading...';\n   }\n    return (\n        <div className={styles.container}>\n            <Grid container spacing={3} justify=\"center\">\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)} >\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom >Infected</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={confirmed.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography colr=\"textSecondary\"> {new Date(lastUpdate).toDateString()} </Typography>\n                        <Typography variant=\"body2\">Number of active cases of covid19</Typography>\n                    </CardContent>\n                </Grid>\n\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)} >\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom >Recovered</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={recovered.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography colr=\"textSecondary\"> {new Date(lastUpdate).toDateString()} </Typography>\n                        <Typography variant=\"body2\">Number of recoveries from covid19</Typography>\n                    </CardContent>\n                </Grid>\n\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)} >\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom >Deaths</Typography>\n                        <Typography variant=\"h5\">\n                            <CountUp\n                                start={0}\n                                end={deaths.value}\n                                duration={2.5}\n                                separator=\",\"\n                            />\n                        </Typography>\n                        <Typography colr=\"textSecondary\"> {new Date(lastUpdate).toDateString()} </Typography>\n                        <Typography variant=\"body2\">Number of death cases from covid19</Typography>\n                    </CardContent>\n                </Grid>\n\n            </Grid>\n        </div>\n    );\n};\n\nexport default Cards;","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    let changeableUrl = url;\n\n    if(country) {\n        changeableUrl = `${url}/countries/${country}`;\n    }\n    try{\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n\n        return { confirmed, recovered, deaths, lastUpdate };\n       \n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchDailyData= async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`);\n        \n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n        }));\n\n        return modifiedData;\n    } catch(error) {\n        console.log(error);\n    }\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const { data: { countries } } = await axios.get(`${url}/countries`);\n\n        return countries.map((country) => country.name);\n    } catch(error) {\n        console.log(error);\n    }\n}","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport {  Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data: {confirmed, deaths, recovered }, country }) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setDailyData( await fetchDailyData() );\n        }\n        \n        fetchAPI();\n    },[]);\n\n    const lineChart = (\n        dailyData.length\n            ? (\n                <Line \n                data={{\n                    labels: dailyData.map(({ date }) => date),\n                    datasets: [{\n                        data: dailyData.map(({ confirmed }) => confirmed),\n                        label: 'Infected',\n                        borderColor: '#3333ff',\n                        fill: true,\n                    }, {\n                        data: dailyData.map(({ deaths }) => deaths),\n                        label: 'Deaths',\n                        borderColor: 'red',\n                        backgroundColor: 'rgba(255,0,0,0.5',\n                        fill: true,\n                    }],\n                }}\n                />) : null\n    );\n\n    const barChart = (\n        confirmed\n        ? (\n            <Bar \n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: [{\n                        label: 'People',\n                        backgroundColor: [\n                            'rgba(0, 0, 255, 0.5)',\n                            'rgba(0, 255, 0, 0.5)',\n                            'rgba(255, 0, 0, 0.5)',\n                        ],\n                        data:[confirmed.value, recovered.value, deaths.value]\n                    }]\n                }}\n                options={{\n                    legend: {display: false},\n                    title: {display: true, text:`Current state in ${country}`},\n\n                }}\n            />\n        ) : null\n    )\n\n    return (\n        <div className={styles.container}>\n            {country ? barChart : lineChart}\n        </div>    \n        );\n};\n\nexport default Chart;","import React,{ useState, useEffect } from 'react';\nimport { NativeSelect, FormControl, StylesProvider } from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\nimport { fetchCountries } from '../../api';\n\n\nconst CountryPicker = ({ handleCountryChange }) => {\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        }\n\n        fetchAPI();\n    },[setFetchedCountries]);\n    \n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value) } >\n                <option value=\"\">Global</option>\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>  )}\n            </NativeSelect>\n        </FormControl>\n    );\n};\n\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from 'react';\n\nimport { Cards, Chart, CountryPicker } from './components';\nimport styles from './App.module.css';\nimport { fetchData } from './api';\nimport coronaImage from './images/image.png';\n\nclass App extends React.Component {\n\n    state = {\n        data: {},\n        country: '',\n    }\n\n    async componentDidMount() {\n        const fetchedData = await fetchData();\n\n        this.setState({ data: fetchedData });\n    }\n\n    handleCountryChange = async (country) => {\n        const fetchedData = await fetchData(country);\n        this.setState({ data: fetchedData, country: country });\n        \n    }\n    render() {\n        const { data, country } = this.state;\n        return (\n            <div className={styles.container}>\n                <img src={coronaImage} alt=\"COVID-19\" className={styles.image} />\n                <Cards data={ data } />\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\n                <Chart data={data} country={country} />\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};"],"sourceRoot":""}